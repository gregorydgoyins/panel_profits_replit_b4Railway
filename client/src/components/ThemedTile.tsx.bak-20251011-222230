// client/src/components/ThemedTile.tsx
import React from 'react';
import { Link } from 'wouter';
import { Card } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import { routeThemeFromPath, type ThemeColor } from '@/hooks/useRouteTheme';
import '@/styles/rimlight.css';

type TileProps = {
  bgClass?: string;
  outerRim?: any;
  to?: string;
  title?: string;
  className?: string;
  rim?: 'inherit' | ThemeColor;   // 'inherit' = color from `to`
  forceTheme?: ThemeColor;        // force a color regardless of `to`
  children?: React.ReactNode;
  'data-testid'?: string;
};

function rimClass(theme: ThemeColor) {
  return `${theme}-rimlight-hover`;
}

function rimOuterClass(outer: any) {
  const name = outer ?? "white";
  return `${name}-rimlight-hover`;
}


  return `${theme}-rimlight-hover`;
}

export function ThemedTile({
  to,
  title,
  className,
  rim = 'inherit',
  forceTheme,
  children,
  ...rest
}: TileProps) {
  const theme: ThemeColor = forceTheme ?? (rim === 'inherit'
    ? routeThemeFromPath(to, 'white')
    : (rim as ThemeColor));

  const body = (
    <Card
      className={cn(
        '!bg-[#1A1F2E]',
        'white-rimlight-hover',   // subtle white outer rim everywhere
        rimClass(theme),          // destination-colored glow on hover
        'hover-elevate transition-all',
        className
      )}
      {...rest}
    >
      {title ? (
        <div className="px-3 pt-3 text-sm text-white/80 uppercase tracking-wide">{title}</div>
      ) : null}
      <div className="p-3">{children}</div>
    </Card>
  );
  return to ? <Link href={to}>{body}</Link> : body;
}

type CTAProps = {
  to: string;
  label: string;
  className?: string;
  forceTheme?: ThemeColor;
};
export function ThemedCTA({ to, label, className, forceTheme }: CTAProps) {
  const theme = forceTheme ?? routeThemeFromPath(to, 'white');
  return (
    <Link href={to}>
      <button
        className={cn(
          'mt-2 h-8 px-3 rounded text-sm uppercase tracking-wide',
          'border bg-black/30 hover:bg-black/40 transition-all',
          rimClass(theme),
          className
        )}
      >
        {label}
      </button>
    </Link>
  );
}
